/* Copyright (C) 
 * 2017 - Khoi Hoang
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

/**
 * @file tracker.cpp
 * @brief The implementation for Tracker.
 * @author Khoi Hoang
 * @version 1.0
 * @date 2017-03-31
 */

#include <climits>

#include "tracker.h"
#include "matutil.h"

using namespace std;

Tracker::Tracker(int yu, int yd)
{
	countUp = 0;
	countDown = 0;

	y_up = yu;
	y_down = yd;
}

int Tracker::requestNewId()
{
	for (int i = 0; i < TRACKER_CAP; ++i) {
		if (!blobPool[i].isActivated()) {
			return i;
		}
	}
	
	return -1;
}

int Tracker::requestBestId(const Point& point)
{
	double minDistance = DBL_MAX;
	int bestId = -1;

	for (int i = 0; i < TRACKER_CAP; ++i) {
		if (blobPool[i].isActivated()) {
			double distance = blobPool[i].distance(point);
			if (distance < minDistance) {
				minDistance = distance;
				bestId = i;
			}
		}
	}
	
	return bestId;
}

void Tracker::receive(const vector<Point>& points)
{
	cout << "debug:received" << endl;
	//for (int i = 0; i < TRACKER_CAP; ++i) {
		//blobPool[i].increaseDeadTime();
	//}

	for (unsigned int i = 0; i < points.size(); ++i) {
		Point curPoint = points[i];
		cout << "debug: curPoint: " << curPoint << endl;
		int id = requestBestId(curPoint);
		cout << "debug: best id: " << id << endl;

		if (id < 0) {
			int newId = requestNewId();
			cout << "debug: new id: " << newId << endl;
			blobPool[newId].set(curPoint);
		} else {
			blobPool[id].update(curPoint);
		}
	}
}

void Tracker:: display(Mat& canvas)
{
	drawBoundary(canvas, y_up, y_down);
	drawInfo(canvas, countUp, countDown);
}
